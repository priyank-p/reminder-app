#!/usr/bin/env node
'use strict';
const path = require('path');
const fs = require('fs');
const glob = require('glob');
const tsNode = require('ts-node');
const ArgParser = require('../app/argparser');
const env = require('../app/env');

// to make test runnable from anywhere
process.chdir(path.resolve(__dirname, '../'));
tsNode.register();

env.setEnv('tests', true);
env.setEnv('mode', 'test');
env.setEnv('development', true);
const TEST_DIR = path.resolve(__dirname, '../test');
const args = new ArgParser(`
Run node tests:

Usage:
./tools/run-tests node-tests/args.js scripts/pm2.js
./tools/run-tests # to run all the tests
`);

args.parse();
let jsFiles = args.nargs;
if (!jsFiles) {
  const nodeTests = glob.sync('test/node-tests/**/*.js');
  const scriptsTests = glob.sync('test/scripts/**/*.js');
  jsFiles = [...nodeTests, ...scriptsTests]
    .map(file => file.replace('test/', ''));
}

// add .js at the end if doesn't already exist.
jsFiles = jsFiles.map(file => {
  if (!file.endsWith('.js')) {
    return file + '.js';
  }

  return file;
});

// relative to test/ directory
const exclude = [
  'scripts/stubs.js'
];

jsFiles.forEach((file, index) => {
  const relative = file.replace(TEST_DIR, '');
  if (exclude.includes(relative)) {
    jsFiles.splice(index, 1);
  }
});

// set globals
global.assert = require('assert');
global.fixtures = require('../test/node-tests/fixtures');

jsFiles.forEach(file => {
  file = path.join(TEST_DIR, file);
  if (!fs.existsSync(file)) {
    console.error(`Test file ${file} does not exsist.`);
    process.exit(1);
  }

  console.log('running test file: ', path.basename(file));
  require(file);
});
