#!/usr/bin/env node
'use strict';

const path = require('path');
const fs = require('fs');
const glob = require('glob');
const argparser = require('../app/argparser');
const env = require('../app/env');
const webpackInfo = require('./webpack-info');
const { execSync } = require('child_process');

process.chdir(path.resolve(__dirname, '../'));

const ROOT_DIR = path.resolve(__dirname, '../');
const TEST_DIR = path.resolve(__dirname, '../test');
const args = argparser(`
Run puppetter frontend tests:

Usage:
./tools/test-frontend file-one.js file-two.js
./tools/test-frontend # to run all the tests
`);

// run migration for test db
console.log('Running migrations on test db...');
execSync('node tools/run-migrations --test', { cwd: ROOT_DIR });

if (webpackInfo.needToPerformBuild) {
  console.log('Running webpack to build frontend files...');
  execSync('node ./node_modules/.bin/webpack --config ' +
           'tools/webpack.config.js -p --env production', { cwd: ROOT_DIR, stdio: 'ignore' });
} else {
  console.log('Skipping webpack build.');
}

// setup env and argv for app server!
process.env.PORT = 3213;
process.argv = [
  ...process.argv.slice(0, 2),
  '--tests'
];

const app = require('../app');

global.assert = require('assert');
let jsFiles = args.nargs;
if (!jsFiles) {
  jsFiles = glob.sync('test/frontend-tests/test-*.js')
    .map(file => file.replace('test/', ''));
}

// add .js at the end if doesn't already exist.
jsFiles = jsFiles.map(file => {
  if (!file.endsWith('.js')) {
    return file + '.js';
  }

  return file;
});

jsFiles.forEach((file, index) => {
  file = path.resolve(TEST_DIR, file);
  jsFiles[index] = file;
  if (!fs.existsSync(file)) {
    console.error(`Test file ${file} does not exsist.`);
    process.exit(1);
  }
});

global.testFiles = jsFiles;
const tests = require('../test/frontend-tests/setup.js');
console.log('Starting tests...');
tests()
  .then(() => {
    app.close();
    process.exit(0);
  })
  .catch((e) => {
    console.log(e);
    app.close();
    process.exit(1);
  });
