#!/usr/bin/env node
'use strict';

const fs = require('fs');
const fsExtra = require('fs-extra');
const path = require('path');
const { promisify } = require('util');
const ora = require('ora');
const env = require('../app/env');
const version = require('../version');
const argparser = require('../app/argparser');

const args = argparser(`
Run migrations on database.
The database will not work unless migration are not applied.

Flags:
  --production, -p     Runs the migrations on production db. [default]
  --development, -d    Runs migrations on development db.
  --test, -t           Runs migrations on test db.
`);

args.add('--production', { type: 'boolean', alias: '-p' });
args.add('--development', { type: 'boolean', alias: '-d' });
args.add('--test', { type: 'boolean', alias: '-t' });

args.parse();

const spinner = new ora({
  text: 'Running migrations',
  spinner: 'dots2'
});

spinner.start();
if (args.test || args.development) {
  env.setEnv('mode', args.test ? 'test' : 'development');
} else {
  env.setEnv('production', true);

  spinner.text = 'Backing up current db in var/backup';
  spinner.color = 'green';
  // create a backup for production db.
  const DB_PATH = path.resolve(__dirname, '../var/reminder-app');
  if (fs.existsSync(DB_PATH)) {
    const DB_BACKUP = path.resolve(__dirname, '../var/backup/reminder-app');
    fsExtra.copySync(DB_PATH, DB_BACKUP);
  }
}

const readdir = promisify(fs.readdir);
const writeFile = promisify(fs.writeFile);
const migrationDir = path.resolve(__dirname, '../app/models/migrations');

async function update_migration_version() {
  spinner.text = 'Updating migration version';
  spinner.color = 'yellow';
  const versionFile = path.resolve(__dirname, '../var/version.js');
  let versions;
  try {
    versions = require(versionFile);
    versions.MIGRATION_VERSION = version.MIGRATION_VERSION;
  } catch(e) {
    versions = {
      MIGRATION_VERSION: version.MIGRATION_VERSION
    };
  }

  fs.open(versionFile, 'w+', async () => {
    // we output the version file in readable unminifed way.
    await writeFile(versionFile, `module.exports = ${
      JSON.stringify(versions, null, 2)
    };\n`);
  });
}

async function run_migrations() {
  const migrationFiles = await readdir(migrationDir);
  spinner.text = 'Running migrations...';
  spinner.color = 'blue';
  const migrations = [];
  migrationFiles.forEach(migrationFile => {
    const migration = require(path.join(migrationDir, migrationFile));
    migrations.push({
      file: path.basename(migrationFile, '.js'),
      migration
    });
  });

  spinner.info('Running Migrations:');
  for (let i = 0; i < migrations.length; i++) {
    spinner.info('   Applying migration ' + migrations[i].file);
    await migrations[i].migration();
  }

  await update_migration_version();
  spinner.succeed('Migration ran successfully!');
}

run_migrations();
